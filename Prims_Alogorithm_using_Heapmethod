import heapq
def prim(graph,start,dest):
    minimum_spanning_tree=[]
    visited=set()
    heap=[(0,start,dest)]
    while heap:
        weight,source,dest=heapq.heappop(heap)
        if dest not in visited:
            visited.add(dest)
            minimum_spanning_tree.append((weight,source,dest))
            for neighbor, neighbor_weight in graph[dest]:
                if neighbor not in visited:
                    heapq.heappush(heap,(neighbor_weight,dest,neighbor))
    return minimum_spanning_tree
graph={
'A':[('B',7),('D',5)],
'B':[('A',7),('C',8),('D',9),('E',7)],
'C':[('B',8),('E',5)],
'D':[('A',5),('B',9),('E',15),('F',6)],
'E':[('B',7),('C',5),('D',15),('F',8)],
'F':[('D',6),('E',9)]
}
start_vertex='A'
mst=prim(graph,start_vertex,start_vertex)
print("MST",mst)
print("Minimum Spanning Tree")
min_spanning_tree_cost=0
for e in mst:
    min_spanning_tree_cost+=e[0]
print("Minimum cost spanning Tree Cost=",min_spanning_tree_cost)
