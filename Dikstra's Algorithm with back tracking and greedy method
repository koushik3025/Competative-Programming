import heapq
import sys
class Graph:
    def __init__(self, V):
        self.V=V
        self.adj=[[] for _ in range(V)]
        self.parent=None
        self.dist=None
    def addEdge(self,u,v,w):
        self.adj[u].append((v,w))
        self.adj[v].append((u,w))
    def printPath(self, parent, node):
        if self.parent[node]==-1:
            print(node,end=" ")
            return
        self.printPath(self.parent, self.parent[node])
        print(node, end=" ")
    def shortestPath(self,src):
        pq=[]
        heapq.heappush(pq,(0,src))
        self.dist=[sys.maxsize]*self.V
        self.parent=[-1]*self.V
        self.dist[src]=0
        while pq:
            d,u=heapq.heappop(pq)
            for v,w in self.adj[u]:
                if self.dist[v]>self.dist[u]+w:
                    self.dist[v]=self.dist[u]+w
                    self.parent[v]=u
                    heapq.heappush(pq,(self.dist[v],v))
        print("Source\t\t Distance \t\t Parent")
        for i in range(self.V):
            print(f"{i} \t\t {self.dist[i]}\t\t{self.parent[i]}")

V=9
source=0
destination=int(input("Enter"))
g=Graph(V)
g.addEdge(0,1,4)
g.addEdge(0,7,8)
g.addEdge(1,0,4)
g.addEdge(1,2,8)
g.addEdge(1,7,11)
g.addEdge(2,1,8)
g.addEdge(2,3,7)
g.addEdge(2,5,4)
g.addEdge(2,8,2)
g.addEdge(3,2,7)
g.addEdge(3,4,9)
g.addEdge(3,5,14)
g.addEdge(4,3,9)
g.addEdge(4,5,10)
g.addEdge(5,6,2)
g.addEdge(5,2,4)
g.addEdge(5,4,10)
g.addEdge(5,3,14)
g.addEdge(6,7,1)
g.addEdge(6,8,6)
g.addEdge(6,5,2)
g.addEdge(7,0,8)
g.addEdge(7,6,1)
g.addEdge(7,1,11)
g.addEdge(7,8,7)
g.addEdge(8,7,7)
g.addEdge(8,6,6)
g.addEdge(8,2,2)
g.shortestPath(source)
print("/n Path")
g.printPath(g.parent, destination)
print(f"\nDistance From {source} to {destination}={g.dist[destination]}")
